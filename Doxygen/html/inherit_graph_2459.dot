digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [id="Node000000",label="updateMethod",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1updateMethod.html",tooltip="Abstract base class for optimisation methods."];
  Node0 -> Node1 [id="edge5619_Node000000_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 [id="Node000001",label="BFGS",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1BFGS.html",tooltip="The quasi-Newton BFGS formula."];
  Node0 -> Node2 [id="edge5620_Node000000_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="DBFGS",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1DBFGS.html",tooltip="The quasi-Newton BFGS formula with the dampening proposed by Powell."];
  Node0 -> Node3 [id="edge5621_Node000000_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="LBFGS",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1LBFGS.html",tooltip="The quasi-Newton Limited-memory BFGS formula. Keeps nPrevSteps_ of the y and s vectors and approximat..."];
  Node0 -> Node4 [id="edge5622_Node000000_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="SR1",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1SR1.html",tooltip="The quasi-Newton Symmetric Rank One formula."];
  Node0 -> Node5 [id="edge5623_Node000000_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="conjugateGradient",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1conjugateGradient.html",tooltip="The Conjugate Gradient formula."];
  Node0 -> Node6 [id="edge5624_Node000000_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="constrainedOptimisationMethod",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1constrainedOptimisationMethod.html",tooltip="Abstract base class for optimisation methods supporting constraints. Does not add functionality to up..."];
  Node6 -> Node7 [id="edge5625_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="SQP",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1SQP.html",tooltip="The quasi-Newton SQP formula for constrained optimisation."];
  Node6 -> Node8 [id="edge5626_Node000006_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="constraintProjection",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1constraintProjection.html",tooltip="Update design variables using Rosen's projection method."];
  Node0 -> Node9 [id="edge5627_Node000000_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="steepestDescent",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$classFoam_1_1steepestDescent.html",tooltip="Update design variables using steepest descent."];
}
